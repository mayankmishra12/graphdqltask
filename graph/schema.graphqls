
scalar UUID
scalar Time

# Enum for sortable fields on Task
enum TaskSortField {
  TASK_ORDER
  NAME
  START_TIME
  END_TIME
  UPDATED_TS
  STATUS
}

# Enum for sort direction
enum SortDirection {
  ASC
  DESC
}

# Input type for sorting tasks
input TaskSort {
  field: TaskSortField!
  direction: SortDirection!
}

# Pagination information
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Task query root
type Query {
  task(id: UUID!): Task
  rootTasks(
    first: Int
    after: String
    last: Int
    before: String
    sort: [TaskSort!]
  ): TaskConnection
}

# Pagination connection type for tasks
type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

# Pagination edge for a task
type TaskEdge {
  node: Task!
  cursor: String!
}

# Core task entity
type Task {
  taskId: UUID!
  parentTaskId: UUID
  taskOrder: Int!
  name: String!
  description: String
  startTime: Time
  endTime: Time
  status: TaskStatus!
  updatedTs: Time!
  updatedUser: String!
  lastModifiedProcess: String
  lastModifiedApp: String
  lastRequestId: String!
  lastActionId: String

  # Relationships
  parent: Task
  children: [Task!]!
  taskType: TaskType
}

# Status type for a task
type TaskStatus {
  statusId: Int!
  statusName: String!
}

# TaskType wraps different kinds of tasks
type TaskType {
  taskTypeId: Int!
  taskId: UUID!
  type: String!

  # Polymorphic extensions
  redjadeTask: RedjadeTask
  samsSurveyTask: SamsSurveyTask
}

# Redjade-specific task data
type RedjadeTask {
  redjadeTaskId: Int!
  taskTypeId: Int!
  redjadeLink: String
}

# Sams survey-specific task data
type SamsSurveyTask {
  taskId: Int!
  taskTypeId: Int!
  surveyId: String
}
