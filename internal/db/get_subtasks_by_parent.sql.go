// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_subtasks_by_parent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSubTasksByParent = `-- name: GetSubTasksByParent :many
SELECT
    t.task_id,
    t.name,
    t.description,
    ts.status_name AS status,
    t.start_time,
    t.end_time,
    t.updated_user,
    t.task_order,
    tt.type AS task_type,
    rj.redjade_link,
    sst.survey_id
FROM task t
         JOIN task_status ts ON t.status_id = ts.status_id
         LEFT JOIN task_type tt ON t.task_id = tt.task_id
         LEFT JOIN redjade_task rj ON tt.task_type_id = rj.task_type_id
         LEFT JOIN sams_survey_task sst ON tt.task_type_id = sst.task_type_id
WHERE t.parent_task_id = $1
ORDER BY t.task_order
`

type GetSubTasksByParentRow struct {
	TaskID      pgtype.UUID
	Name        string
	Description pgtype.Text
	Status      string
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	UpdatedUser string
	TaskOrder   int32
	TaskType    pgtype.Text
	RedjadeLink pgtype.Text
	SurveyID    pgtype.Text
}

func (q *Queries) GetSubTasksByParent(ctx context.Context, parentTaskID pgtype.UUID) ([]GetSubTasksByParentRow, error) {
	rows, err := q.db.Query(ctx, getSubTasksByParent, parentTaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubTasksByParentRow
	for rows.Next() {
		var i GetSubTasksByParentRow
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.UpdatedUser,
			&i.TaskOrder,
			&i.TaskType,
			&i.RedjadeLink,
			&i.SurveyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
