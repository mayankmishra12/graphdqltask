// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ListRootTasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listRootTasks = `-- name: ListRootTasks :many
SELECT
    t.task_id,
    t.task_order,
    t.name,
    t.description,
    t.start_time,
    t.end_time,
    t.updated_ts,
    t.updated_user,
    ts.status_id,
    ts.status_name
FROM task t
         JOIN task_status ts ON t.status_id = ts.status_id
WHERE t.parent_task_id IS NULL
  AND ($1::timestamp IS NULL OR t.updated_ts > $1)
ORDER BY t.updated_ts ASC
    LIMIT $2
`

type ListRootTasksParams struct {
	Column1 pgtype.Timestamp
	Limit   int32
}

type ListRootTasksRow struct {
	TaskID      pgtype.UUID
	TaskOrder   int32
	Name        string
	Description pgtype.Text
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	UpdatedTs   pgtype.Timestamp
	UpdatedUser string
	StatusID    int32
	StatusName  string
}

func (q *Queries) ListRootTasks(ctx context.Context, arg ListRootTasksParams) ([]ListRootTasksRow, error) {
	rows, err := q.db.Query(ctx, listRootTasks, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRootTasksRow
	for rows.Next() {
		var i ListRootTasksRow
		if err := rows.Scan(
			&i.TaskID,
			&i.TaskOrder,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.UpdatedTs,
			&i.UpdatedUser,
			&i.StatusID,
			&i.StatusName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
