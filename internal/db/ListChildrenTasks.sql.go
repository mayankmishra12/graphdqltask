// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ListChildrenTasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listChildrenTasks = `-- name: ListChildrenTasks :many
SELECT
    task_id,
    parent_task_id,
    task_order,
    name,
    description,
    start_time,
    end_time,
    updated_ts,
    updated_user
FROM task
WHERE parent_task_id = $1
ORDER BY task_order
`

type ListChildrenTasksRow struct {
	TaskID       pgtype.UUID
	ParentTaskID pgtype.UUID
	TaskOrder    int32
	Name         string
	Description  pgtype.Text
	StartTime    pgtype.Timestamp
	EndTime      pgtype.Timestamp
	UpdatedTs    pgtype.Timestamp
	UpdatedUser  string
}

func (q *Queries) ListChildrenTasks(ctx context.Context, parentTaskID pgtype.UUID) ([]ListChildrenTasksRow, error) {
	rows, err := q.db.Query(ctx, listChildrenTasks, parentTaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChildrenTasksRow
	for rows.Next() {
		var i ListChildrenTasksRow
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentTaskID,
			&i.TaskOrder,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.UpdatedTs,
			&i.UpdatedUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
