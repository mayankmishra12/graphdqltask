// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTopLevelTasks = `-- name: GetTopLevelTasks :many
SELECT
    t.task_id,
    t.name,
    t.description,
    ts.status_name AS status,
    t.start_time,
    t.end_time,
    t.updated_user
FROM task t
         JOIN task_status ts ON t.status_id = ts.status_id
WHERE t.parent_task_id IS NULL
ORDER BY t.updated_ts DESC
`

type GetTopLevelTasksRow struct {
	TaskID      pgtype.UUID
	Name        string
	Description pgtype.Text
	Status      string
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	UpdatedUser string
}

func (q *Queries) GetTopLevelTasks(ctx context.Context) ([]GetTopLevelTasksRow, error) {
	rows, err := q.db.Query(ctx, getTopLevelTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopLevelTasksRow
	for rows.Next() {
		var i GetTopLevelTasksRow
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.UpdatedUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
